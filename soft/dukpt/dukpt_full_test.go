package dukpt

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var Bdk = []byte{0xE0, 0x89, 0x06, 0x48, 0x9D, 0x14, 0x4C, 0x6C, 0x61, 0xD0, 0x2E, 0xCA, 0x20, 0xF9, 0xD2, 0x36}
var KSN = []byte{0x50, 0x4F, 0x53, 0x30, 0x32, 0x00, 0x00, 0x20, 0x00, 0x01}
var KSN10 = []byte{0x50, 0x4F, 0x53, 0x30, 0x32, 0x00, 0x00, 0x20, 0x01, 0x00}
var Ipek = []byte{0x30, 0x85, 0x98, 0xd6, 0xdf, 0xeb, 0x67, 0x24, 0x09, 0xa1, 0x42, 0x06, 0x90, 0xe4, 0x96, 0x2a}
var Pek = []byte{0xdc, 0xd8, 0xcd, 0x6c, 0x5f, 0x2e, 0xcb, 0xc7, 0xfd, 0xe7, 0x24, 0xcb, 0xa1, 0x4b, 0x65, 0x90}

//WagnerAOS
var PlainText = []byte{0x57, 0x61, 0x67, 0x6E, 0x65, 0x72, 0x41, 0x4F, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

//var Ciphertext = []byte{0xC2, 0x5C, 0x1D, 0x11, 0x97, 0xD3, 0x1C, 0xAA, 0x87, 0x28, 0x5D, 0x59, 0xA8, 0x92, 0x04, 0x74, 0x26, 0xD9, 0x18, 0x2E, 0xC1, 0x13, 0x53, 0xC0, 0x51, 0xAD, 0xD6, 0xD0, 0xF0, 0x72, 0xA6, 0xCB, 0x34, 0x36, 0x56, 0x0B, 0x30, 0x71, 0xFC, 0x1F, 0xD1, 0x1D, 0x9F, 0x7E, 0x74, 0x88, 0x67, 0x42, 0xD9, 0xBE, 0xE0, 0xCF, 0xD1, 0xEA, 0x10, 0x64, 0xC2, 0x13, 0xBB, 0x55, 0x27, 0x8B, 0x2F, 0x12}

func TestFullDukptFlow(t *testing.T) {

	tdes := false
	key := []byte("")

	ipek, _ := DeriveIpekFromBdk(Bdk, KSN)
	pek, _ := DerivePekFromIpek(Ipek, KSN)
	pek10, _ := DerivePekFromIpek(pek, KSN10)

	assert.Equal(t, ipek, Ipek, "Derived IPEK should be correct")
	assert.Equal(t, pek, Pek, "Derived PEK should be correct")

	t.Logf("BDK: %x", Bdk)
	t.Logf("KSN: %x", KSN)
	t.Logf("IPEK: %x", ipek)
	t.Logf("PEK: %x", pek)
	t.Logf("PEK10: %x", pek10)

	plainText := []byte("WagnerAOS")
	//hexText := []byte("5761676E6572414F5300000000000000")
	//key := []byte("BBF47BAC9F09FF312BE2DB35DC73C58A")

	//TDES Key
	//tdesKey := buildTdesKey(pek)
	if tdes {
		key = buildTdesKey(pek)
	} else {
		key = pek
	}

	//ENCRYPTION
	//encryptedText := []byte("A10675857A6D01C08A3F71C449EAC96A9AE0F4499A06937C29EEA532D291D13EECB120E87B0BC03D90831890F611E764258C7297921C095E4160C4BB9ABF9430331D97677846D4B7AA1D35FDDEEF2DC46AE895252EA55659")
	encryptedText := EncryptDecryptAes128Ecb(PlainText, key, true)

	//DECRYPTION
	decryptedText := EncryptDecryptAes128Ecb(encryptedText, key, false)

	t.Logf("TDES: %t", tdes)
	t.Logf("KEY: %x", key)
	t.Logf("plainText: %s", plainText)
	t.Logf("hexText: %x", PlainText)
	t.Logf("decriptedText: %s", decryptedText)
	t.Logf("encriptedText: %x", encryptedText)

	assert.Equal(t, decryptedText, "")
	//assert.Equal(t, decryptedText, hexText)

}
